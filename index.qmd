---
# title: "Mesa de Procesamiento REP"
# author: "Febrero 2024"
format:
  revealjs:
    auto-stretch: false
    margin: 0
    slide-number: true
    scrollable: true
    preview-links: auto
    logo: imagenes/logo_portada2.png
    css: ine_quarto_styles.css
    # footer: https://quarto.org
---

```{r librerias}
#| echo: FALSE
#| output: FALSE
#| eval: TRUE
library(dplyr)
library(datos)
library(readxl)
```

# 

```{=html}
<!---
# TODO: this does not work
.linea-superior[]
.linea-inferior[] 
--->
```
```{=html}
<!---
# TODO: this does not work
![](imagenes/logo_portada2.png){.center style="width: 20%;"}   
--->
```

```{=html}
<!---
<img src="imagenes/logo_portada2.png" style="width: 20%"/>  
--->
```
<img src="imagenes/logo_portada2.png" width="20%"/>

[**Capacitación en R y herramientas de productividad**]{.big-par .center-justified}

[**Nivel básico**]{.big-par .center-justified}

[**Mayo 2024**]{.big-par .center-justified}

## Contenidos
::: {.incremental .small-par}
- Operador pipe
- Trabajo básico con filas
- Trabajo básico con columnas
- Herramientas de edición de datos: mutate
- Herramientas de edición de datos: if_else
- Herramientas de edición de datos: case_when
- Herramientas de edición de datos: group_by
- Ejercicios
:::

## Previo

::: {.incremental .small-par}
- Para esta clase usaremos el dataset "vuelos" que contiene la información de los vuelos con salida en los aeropuertos de Nueva York en el año 2013.
- Recordemos cómo importar una base:
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
library(readxl)
library(dplyr)
vuelos <- read_excel("data/vuelos.xlsx")
```

## Previo

::: {.incremental .small-par}
- Miremos un poco los datos...
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
summary(vuelos)
```

::: notes
- Tenemos el año, el mes y el día de salida
- Los horarios de salida y llegada de los vuelos
- Los horarios de atraso de las salidas y llegadas en minutos. Los números negativos representan las salidas o llegadas más tempranas
- La abreviatura de las aerolíneas
- El número del vuelo
- El código de cola
- El origen y el destinto de los vuelos
- El tiempo de vuelo
- La distancia del vuelo
- La hora y los minutos son los horarios de salida separados en horas y minutos

:::

## Operador pipe %>% 
::: {.incremental .small-par}
- El operador pipe es un operador de flujo utilizado en R principalmente para mejorar la legibilidad del código y facilitar el proceso de encadenamiento de funciones.
- Lo que hace es tomar el resultado de una expresión o función y pasarlo como el primer argumento a la siguiente función.
- Por ejemplo, queremos obtener los seis primeros elementos de "vuelos" usando la función head():
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% head()
```
::: notes
- En el ejemplo estamos aplicando la función head al dataframe vuelos, podemos ver que el argumento de la función, que en este caso es el dataframe vuelos, queda al lado izquierdo y no dentro de la función, entonces podemos leer de izquierda a derecha
:::

## Operador pipe %>% 
::: {.incremental .small-par}
- Es lo mismo que...
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
head(vuelos)
```

::: notes
- Lo anterior es lo mismo que insertar el dataframe vuelos dentro de la función head
:::

## Operador pipe %>% 
::: {.incremental .small-par}
- Otro ejemplo: contar el número de veces que aparece cada aerolinea
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  count(aerolinea)
```

::: notes
- para esto aplicamos la función count a vuelos indicando el segundo argumento que es la variable que queremos contar que en este caso es aerolinea
:::

## Operador pipe %>% 
::: {.incremental .small-par}
- Es lo mismo que...
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
count(vuelos, aerolinea)
```

::: notes
- lo anterior es lo mismo que insertar los argumentos vuelos y aerolinea dentro de la función count
:::

## Trabajo básico con filas
::: {.incremental .small-par}
**Función filter** 

- Se utiliza para seleccionar subconjuntos de datos.
- Funciona aplicando **condiciones lógicas** (==, !=, >, >=, <, <=) a las filas del conjunto de datos y devolviendo solo aquellas filas que cumplen con esas condiciones.
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
filter(vuelos, aerolinea=="UA")
```

::: notes
en el ejemplo queremos filtrar las filas donde la aerolinea sea igual a "UA"
:::

## Trabajo básico con filas
::: {.incremental .small-par}
- Usando %>% 
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  filter(aerolinea=="UA")
```

::: notes
aca vemos que usando el operador pipe "vuelos" queda al lado iquierdo de la función filter y dentro de la función la condición que queremos que se cumpla
:::

## Trabajo básico con filas
::: {.incremental .small-par}
- Otros ejemplos
:::
. . .
```{r}
#| echo: TRUE
#| eval: FALSE
vuelos %>% 
  filter(mes>1)

vuelos %>% 
  filter(atraso_salida <= 100)

vuelos %>% 
  filter(aerolinea!="AA" & mes == 12)

vuelos %>% 
  filter(atraso_llegada %in% 100:200)
```

::: {.incremental .small-par}
- Operador %in%
:::
. . .

```{r}
#| echo: TRUE
#| eval: TRUE
vector1 <- c(1, 2, 3, 4, 5)
vector2 <- c(3, 4, 5, 6, 7)
vector1 %in% vector2
```

::: notes 
- En el primer ejemplo estamos filtrando por las filas donde el mes sea mayor a 1
- En el segundo por las filas donde el atraso de salido sea menor o igual que 100
- En el tercer ejemplo filtramos por las filas donde la aerolinea sea distinta a "AA" y que el mes haya sido igual a 12
- En el último ejemplo se están seleccionando las filas donde el valor de la columna "atraso_llegada" se encuentra contenido dentro del rango 100 a 200 (inclusive).
- El operador %in% se utiliza para verificar si los elementos de un vector están presentes en otro vector. Esto retorna un vector lógico indicando si hubo un match o no
:::

## Trabajo básico con filas
::: {.incremental .small-par}
**Funciones slice** 

- Sirven para "cortar" los dataframes a nivel de filas
- Ejemplo: extraer las cinco primeras filas de "vuelos"
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
slice_head(vuelos, n = 5)
```
::: {.incremental .small-par}
- Usando %>% 
:::
. . .
```{r}
#| echo: TRUE
#| eval: FALSE
vuelos %>% 
  slice_head(n = 5)
```

## Trabajo básico con filas
::: {.incremental .small-par}
**Funciones slice** 

- La función **slice** selecciona las filas por su **posición** numérica en el marco de datos.
- Ejemplo: extraer las filas 100 a la 105
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
slice(vuelos, 100:105)
```
::: {.incremental .small-par}
- Usando %>% 
:::
. . .
```{r}
#| echo: TRUE
#| eval: FALSE
vuelos %>% 
  slice(100:105)
```

## Anidación de funciones
::: {.incremental .small-par}
- Podemos aplicar más de una función a la vez a un dataframe.
- Por ejemplo, usando filter() y slice_head() en conjunto.
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
slice_head(filter(vuelos, aerolinea=="UA"), n = 5)
```
::: {.incremental .small-par}
- Usando %>% 
:::
. . .
```{r}
#| echo: TRUE
#| eval: FALSE
vuelos %>% 
  filter(aerolinea=="UA") %>% 
  slice_head(n = 5)
```

## Anidación de funciones
::: {.incremental .small-par}
- Otro ejemplo:
- Utilizar la función count() para contar la frecuencia de ocurrencia de combinaciones únicas de los orígenes y destinos.
- Luego, utilizar la función filter() para seleccionar solo aquellas filas donde el valor de la columna "origen" sea igual al aeropuerto "JFK".
- Finalmente, utilizar la función slice_head() para mostrar las primeras filas del resultado obtenido.
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
slice_head(filter(count(vuelos, origen, destino), origen=="JFK"), n=5)
```
::: {.incremental .small-par}
- Usando %>% 
:::
. . .
```{r}
#| echo: TRUE
#| eval: FALSE
vuelos %>% 
  count(origen, destino) %>% 
  filter(origen == "JFK") %>% 
  slice_head(n = 5)
```

::: notes
count(vuelos, origen, destino): Esta función cuenta las ocurrencias de combinaciones únicas de valores en las columnas origen y destino del dataframe vuelos, devolviendo un nuevo dataframe con tres columnas: origen, destino y n, que representa la cantidad de ocurrencias de cada combinación.
filter( ..., origen=="JFK"): Luego, se filtran las filas de este nuevo dataframe donde el valor de la columna origen sea igual a "JFK".
slice_head( ..., n=5): Finalmente, se seleccionan las primeras 5 filas del dataframe resultante.
:::

## Ejercicio 1
::: {.incremental .small-par}
- Del dataframe vuelos, obtenga las 100 primeras filas de vuelos
- Filtre las filas donde los meses estén entre enero y marzo
- Filtre las filas donde la aerolinea sea UA o DL
- Filtre las filas donde la aerolinea sea UA o DL y agregue la condición de que el día sea igual a 12
- Filtre la base donde el horario de salida este entre 500 y 1200, luego cuente el número de veces que aparece cada aerolinea
:::

## Solución ejercicio 1
::: {.incremental .small-par}
- Del dataframe vuelos, obtenga las 100 primeras filas de vuelos
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  slice_head(n = 100)
```

## Solución ejercicio 1
::: {.incremental .small-par}
- Filtre las filas donde los meses estén entre enero y marzo
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  filter(mes %in% 1:3)
```

## Solución ejercicio 1
::: {.incremental .small-par}
- Filtre las filas donde la aerolínea sea UA o DL
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  filter(aerolinea=="UA" | aerolinea=="DL")
```

## Solución ejercicio 1
::: {.incremental .small-par}
- Filtre las filas donde la aerolínea sea UA o DL y agregue la condición de que el día sea igual a 12
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  filter((aerolinea=="UA" | aerolinea=="DL") & dia == 12)
```
## Solución ejercicio 1
::: {.incremental .small-par}
- Filtre la base donde el horario de salida este entre 500 y 1200, luego cuente el número de veces que aparece cada aerolínea
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  filter(horario_salida %in% 500:1200) %>% 
  count(aerolinea)
```

## Trabajo básico con columnas
::: {.incremental .small-par}
- Selección de columnas
- **Por nombre**
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  select(aerolinea, vuelo)
```

## Trabajo básico con columnas
::: {.incremental .small-par}
**Por posición**
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  select(1,3,5)
```

::: notes
- Acá es importante mencionar que seleccionar columnas por posición puede ser riesgoso dado que el orden de las columnas podría cambiar al agregar o eliminar columnas a nuestro dataframe.
:::

## Trabajo básico con columnas
::: {.incremental .small-par}
**Por rango**
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  select(1:4)
```

## Trabajo básico con columnas
::: {.incremental .small-par}
**Por selección negativa**
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  select(-4,-6)
```

## Trabajo básico con columnas
::: {.incremental .small-par}
**Por condiciones en el nombre**
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  select(starts_with("horario"))
```

## Trabajo básico con columnas
::: {.incremental .small-par}
**Por condiciones en el nombre**
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  select(ends_with("programada"))
```

## Trabajo básico con columnas
::: {.incremental .small-par}
**Por condiciones en el nombre**
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  select(contains("_"))
```

## Trabajo básico con columnas
::: {.incremental .small-par}
- Renombrar columnas
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  rename(salida = horario_salida,
         llegada = horario_llegada)
```

## Ejercicio 2
::: {.incremental .small-par}
- De la carpeta "data" cargue el excel "flores.xlsx" y llámelo "flores"
- ¿Cuáles son los nombres de las columnas?
- Seleccione las columnas Especie y Largo.Petalo
- Seleccione las columnas que empiezan con "Largo"
- Renombre "Especie" como "especie"
:::

## Solución ejercicio 2
::: {.incremental .small-par}
- Cargue el excel "flores.xlsx" y llámelo "flores"
- ¿Cuáles son los nombres de las columnas?
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
flores <- read_excel("data/flores.xlsx")
names(flores)
```

## Solución ejercicio 2
::: {.incremental .small-par}
- Seleccione las columnas Especie y Largo.Petalo
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
flores %>% select(Especie, Largo.Petalo)
```

## Solución ejercicio 2
::: {.incremental .small-par}
- Seleccione las columnas que empiezan con "Largo"
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
flores %>% select(starts_with("Largo"))
```

## Solución ejercicio 2
::: {.incremental .small-par}
- Renombre "Especie" como "especie"
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
flores %>% rename(especie = Especie)
```

## Herramientas de edición de datos: mutate
::: {.incremental .small-par}
- La función mutate() en R se utiliza para crear nuevas columnas o modificar las existentes. 
- Por ejemplo, queremos crear una columna que sea la suma del atraso en la salida y el atraso en la llegada llamada atraso_total.
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  mutate(atraso_total = atraso_salida + atraso_llegada) %>% 
  select(atraso_total)
```

## Herramientas de edición de datos: mutate
::: {.incremental .small-par}
- También podemos reemplazar una columna ya existente
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  mutate(distancia = distancia/2) %>% 
  select(distancia)
```

## Herramientas de edición de datos: mutate
::: {.incremental .small-par}
- Otros ejemplos
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  mutate(distancia_promedio = mean(distancia, na.rm = TRUE),
         distancia_sqrt = sqrt(distancia),
         origen_destino = paste(origen, destino, sep = "_"),
         atraso_salida_min = min(atraso_salida, na.rm = TRUE),
         atraso_llegada_max = max(atraso_llegada, na.rm = TRUE),
         aerolinea_minuscula = tolower(aerolinea)) %>% 
  select(distancia_promedio,distancia_sqrt,origen_destino,atraso_salida_min,atraso_llegada_max,aerolinea_minuscula)
```

::: notes
- Para las funciones mean, min y max hay que especificar que no tome en cuenta los valores NA o también conocidos como valores missing o valores perdidos
- La función paste concatena o une sus argumentos mediante un separador que puede ser cualquier caracter del tipo texto. En este caso usamos "_". Lo que retorna esta función es un objeto de tipo character o string.

- mutate(distancia_promedio = mean(distancia, na.rm = TRUE): Calcula la media de la columna distancia y crea una nueva columna llamada distancia_promedio que almacena este valor.
- mutate(distancia_sqrt = sqrt(distancia)): Calcula la raíz cuadrada de cada valor en la columna distancia y crea una nueva columna llamada distancia_sqrt que almacena estos valores.
- mutate(origen_destino = paste(origen, destino, sep = "_")): Crea una nueva columna llamada origen_destino que concatena los valores de las columnas origen y destino separados por un guion bajo "_".
- mutate(atraso_salida_min = min(atraso_salida, na.rm = TRUE)): Encuentra el valor mínimo en la columna atraso_salida y crea una nueva columna llamada atraso_salida_min que almacena este valor. La opción na.rm = TRUE se utiliza para ignorar los valores NA (ausentes) al calcular el mínimo.
- mutate(atraso_llegada_max = max(atraso_llegada, na.rm = TRUE)): Encuentra el valor máximo en la columna atraso_llegada y crea una nueva columna llamada atraso_llegada_max que almacena este valor. Al igual que antes, na.rm = TRUE se utiliza para ignorar los valores NA al calcular el máximo.
- mutate(aerolinea_minuscula = tolower(aerolinea)): Convierte los valores en la columna aerolinea a minúsculas y crea una nueva columna llamada aerolinea_minuscula con estos valores convertidos.
:::

## Herramientas de edición de datos: if_else
::: {.incremental .small-par}
- Es una función útil para realizar operaciones condicionales en vectores en R, permitiendo aplicar diferentes acciones dependiendo de una condición específica para cada elemento del vector.
- En términos simples, se podría pensar en if_else() como una forma de decirle a R: "Si se cumple esta condición, haz esto; de lo contrario, haz aquello".
:::

## Herramientas de edición de datos: if_else
::: {.incremental .small-par}
- Por ejemplo, queremos generar una columna llamada "tramo" que sea "largo" si el tiempo del vuelo fue mayor a 150, en caso contrario sea "corto" y si es NA que sea "valor perdido".
- Adicionalmente, queremos modificar la variable "tiempo_vuelo": si es NA, reemplazar por un cero; de lo contrario, se mantiene el valor original.
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos %>% 
  mutate(tramo = if_else(condition = tiempo_vuelo > 150, true = "largo", false = "corto", missing = "valor perdido"),
         tiempo_vuelo = if_else(is.na(tiempo_vuelo), 0, tiempo_vuelo))
```

::: notes
- Acá utilizamos if_else() para asignar valores a esta nueva variable llamada "tramo" basados en una condición. La condición es que si el valor de tiempo_vuelo es mayor que 150, se asigna el valor "largo", de lo contrario se asigna "corto". El parámetro missing es opcional y se usa para especificar qué valor asignar si hay valores perdidos en tiempo_vuelo, en este caso "valor perdido".
- En el segundo mutate se está modificando la variable tiempo_vuelo. Se está utilizando if_else() para reemplazar los valores perdidos (NA) en tiempo_vuelo con el valor 0. Esto se hace verificando si tiempo_vuelo es un valor perdido usando la función is.na(tiempo_vuelo).

:::


## Herramientas de edición de datos: case_when
::: {.incremental .small-par}
- Utiliza la misma lógica que if_else pero para múltiples condiciones lógicas
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE

datos <- data.frame(puntuacion = c(80, 65, 90, 75, 50))
datos <- datos %>%
  mutate(resultado = case_when(
    puntuacion >= 90 ~ "A",
    puntuacion >= 80 ~ "B",
    puntuacion >= 70 ~ "C",
    TRUE ~ "F" # En caso de que ninguna de las condiciones anteriores se cumpla
  ))
datos

```
::: {.incremental .small-par}
- Notas:
  - Las condiciones se evalúan en orden
  - Si no se cumple una de las condiciones, el valor asignado será un NA
:::

::: notes
En este ejemplo, case_when() evalúa cada fila de datos y asigna un valor a la columna resultado según el valor de puntuacion. Si la puntuación es mayor o igual a 90, se asigna "A"; si es mayor o igual a 80, se asigna "B"; si es mayor o igual a 70, se asigna "C"; y si ninguna de estas condiciones se cumple (indicado por TRUE), se asigna "F".
:::

## Herramientas de edición de datos: case_when
::: {.incremental .small-par}
- Por qué el orden importa?
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
data <- data.frame(x = c(1, 2, 3, 4, 5))

data %>% mutate(y = case_when(x < 3 ~ "Bajo",
                              x < 5 ~ "Medio",
                              TRUE ~ "Alto"))

data %>% mutate(y = case_when(x < 5 ~ "Medio",
                              x < 3 ~ "Bajo",
                              TRUE ~ "Alto"))
```

## Herramientas de edición de datos: case_when
::: {.incremental .small-par}
- Ejemplo usando "vuelos":
- Queremos crear una variable tramo donde si la distancia fue mayor a 3000 que sea "largo", si fue menor a 3000 pero mayor o igual que 2000 que sea "mediano" y en cualquier otro caso que sea "corto".
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
vuelos <- vuelos %>% 
  mutate(tramo =  case_when(distancia >= 3000 ~ "largo",
                           distancia >= 2000 ~ "mediano",
                           TRUE ~ "corto"))
# Revisamos
vuelos %>% select(distancia, tramo)
```

## Herramientas de edición de datos: group_by
::: {.incremental .small-par}
- La función group_by() permite agrupar los datos por una o más variables, lo que permite analizar métricas y patrones agregados.
- La función summarise() funciona de forma análoga a la función mutate, excepto que en lugar de añadir nuevas columnas crea un nuevo data frame.
- Veamos un ejemplo:
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
estudiantes <- data.frame(
  nombre = c("Juan", "María", "Pedro", "Luis", "Ana"),
  edad = c(20, 22, 19, 21, 20),
  materia = c("Matemáticas", "Historia", "Matemáticas", "Historia", "Matemáticas")
)

estudiantes
```
## Herramientas de edición de datos: group_by

```{r}
#| echo: TRUE
#| eval: TRUE
# Utilizar group_by() para agrupar los datos por materia
estudiantes_por_materia <- estudiantes %>%
  group_by(materia)

estudiantes_por_materia

# Calcular el promedio de edad en cada materia
promedio_edad_por_materia <- estudiantes_por_materia %>%
  summarise(promedio_edad = mean(edad))

promedio_edad_por_materia
```

::: notes
- Cuando hacemos un group_by la base no tiene cambios, simplemente queda agrupada por las columnas que le decimos
- Solamente cuando hacemos un mutate o un summarise se muestran los cambios. Por ejemplo, usando summarise se crea un dataframe nuevo que muestra los datos de manera agrupada, como en este caso que genera un dataframe con el promedio de edad
:::


## Herramientas de edición de datos: group_by
::: {.incremental .small-par}
- Ejemplo usando "vuelos":
:::
. . .
```{r}
#| echo: TRUE
#| eval: TRUE
# Utilizar group_by() para agrupar los datos por aerolinea
vuelos_agrupado <- vuelos %>% 
  group_by(aerolinea) %>% 
  summarise(dist_promedio = mean(distancia, na.rm = TRUE))

vuelos_agrupado
```

## Ejercicio 3
::: {.incremental .small-par}
1. Cargue el archivo excel "encuesta.xlsx" como "encuesta" contenido en la carpeta data.
2. Utilizando el operador %>% de forma anidada:
  - Modifique la columna horas_tv: si horas tv es NA reemplazar por un 0; de lo contrario, se mantiene el valor original
  - Genere una columna llamada tramo_edad que sea "Adulto mayor" cuando la edad sea mayor o igual que 50, "Adulto" cuando la edad esté entre 20 y 49 y "Joven" cuando la edad sea menor que 20.
  - Agrupe los datos por "tramo_edad" y usando summarise() calcule las horas tv promedio para cada tramo, llamando a esta variable "horas_tv_prom".
:::

## Solución ejercicio 3

```{r}
#| echo: TRUE
#| eval: TRUE

encuesta <- read_excel("data/encuesta.xlsx")

encuesta %>% mutate(horas_tv = if_else(is.na(horas_tv), 0, horas_tv),
                    tramo_edad = case_when(edad >= 50 ~ "Adulto mayor",
                                           edad >= 20 ~ "Adulto",
                                           TRUE ~ "Joven")) %>% 
  group_by(tramo_edad) %>% 
  summarise(horas_tv_prom = mean(horas_tv))
```

## Tarea 2
::: {.incremental .small-par}
- Para esta tarea trabajaremos con la base histórica de la superficie autorizada (m2) de los permisos de edificación, la cual corresponde a un censo que mide la actividad de la construcción a través de la intención de construir en el país, por medio del Formulario Único de Edificación (FUE), para los destinos habitacional y no habitacional.
:::

## Tarea 2
::: {.incremental .small-par}
1. Cargue la base "superficie.rds" como "superficie" contenida en la carpeta "data", usando la función read_rds() del paquete "readr".
2. Utilice la función summary() para inspeccionar los datos. ¿Qué períodos abarca la base?
3. Filtre las diez primeras filas.
4. Filtre las filas donde la variable "anio" sea igual a 1991.
5. Filtre las filas donde la variable "anio" sea igual a 1991 y "superficie_total" sea mayor que 700000.
6. Seleccione las columnas que comiencen con "superficie"
7. Genere una nueva columna llamada "mes_nombre" usando case_when() para asignar el nombre correspondiente a cada mes usando "mes_num". Por ejemplo, si "mes_num" es igual a 1, entonces "mes_nombre" debe ser "Enero".
8. Agrupe la base por "anio" y calcule el promedio de "superficie_total".
:::

## Tarea 2
::: {.incremental .small-par}
9. Utilizando funciones anidadas:
  - Genere una nueva columna llama "tramo_superficie" usando la función case_when(). Si "superficie_total" es mayor o igual a 1500000 que sea "grande", si es mayor o igual a 1200000 que sea "mediana", y en cualquier otro caso "pequeña".
  - Filtre las filas donde "tramo_superficie" sea igual a "grande" y "anio" igual a 2019.
  - Usando un if_else(), genere una columna llamada "vivienda_mayor" que sea TRUE si "superficie_vivienda" es mayor a "superficie_no_vivienda" y en caso contrario que sea FALSE.
  - Finalmente, genere otra columna llamada "superficie_hect" que sea "superficie_total" dividido por 1000.
:::
